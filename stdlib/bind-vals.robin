;'<<SPEC'

    -> Tests for functionality "Evaluate Robin Expression (with Stdlib)"

`bind-vals` is a macro for bindings the components of a list to the
identifiers given in another list (of symbols).

It is similar to `bind-args` but doesn't evaluate the values that are
being bound.

    | (bind-vals (a b) (literal (1 2))
    |   (list a b))
    = (1 2)

Expressions in the list of values are not evaluated.

    | (bind-vals (a b) (literal ((subtract 5 4) (subtract 10 1)))
    |   (list a b))
    = ((subtract 5 4) (subtract 10 1))

This is how it might be used in a macro definition.

    | (bind add (macro (args env)
    |   (bind-vals (a b) args
    |     (subtract a (subtract 0 b))))
    |   (add 4 5))
    = 9

    | (bind add (macro (args env)
    |   (bind-vals (a b) args
    |     (subtract a (subtract 0 b))))
    |   (add 4 (add 5 6)))
    ? (abort (expected-number (add 5 6)))

'<<SPEC'

(define bind-vals
  (macro (args env)
    (let (
      (id-list       (head args))
      (val-list      (eval env (head (tail args))))
      (expr          (head (tail (tail args))))
      (bind-vals-r   (macro (args env)
        (let (
          (self     (eval env (head args)))
          (id-list  (eval env (head (tail args))))
          (val-list (eval env (head (tail (tail args)))))
          )
          (if (equal? id-list ())
            expr
            (list (literal bind) (head id-list) (list (literal literal) (head val-list))
              (self self (tail id-list) (tail val-list))))))))
      (eval env (bind-vals-r bind-vals-r id-list val-list)))))
