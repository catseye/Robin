;'<<SPEC'

### `eval` ###

    -> Tests for functionality "Interpret core Robin Program"

`eval` evaluates its first argument to obtain an environment, then
evaluates its second argument to obtain an S-expression; it then
evaluates that S-expression in the given environment.

    | (define literal (macro (s a e) (head a)))
    | (define env (macro (s a e) e))
    | (display
    |   (eval (env) (literal
    |     (prepend (literal a)
    |               (prepend (literal b) ())))))
    = (a b)

    | (define literal (macro (s a e) (head a)))
    | (display
    |   (eval () (literal
    |     (prepend (literal a)
    |               (prepend (literal b) ())))))
    ? uncaught exception: (unbound-identifier prepend)

Something fairly complicated that uses `bind`...?

    | (define literal (macro (s a e) (head a)))
    | (define bind (macro (self args env)
    |   (eval
    |     (prepend (prepend (head args) (prepend (eval env (head (tail args))) ())) env)
    |     (head (tail (tail args))))))
    | (display
    |   (bind bindings (prepend
    |                    (prepend (literal same) (prepend equal? ()))
    |                    (prepend
    |                      (prepend (literal x) (prepend #f ()))
    |                      ()))
    |     (eval bindings (literal (same x x)))))
    = #t

If two bindings for the same identifier are supplied in the environment
alist passed to `eval`, the one closer to the front of the alist takes
precedence.

    | (define literal (macro (s a e) (head a)))
    | (define bind (macro (self args env)
    |   (eval
    |     (prepend (prepend (head args) (prepend (eval env (head (tail args))) ())) env)
    |     (head (tail (tail args))))))
    | (display
    |   (bind bindings (prepend
    |                    (prepend (literal foo) (prepend (literal yes) ()))
    |                    (prepend
    |                       (prepend (literal foo) (prepend (literal no) ()))
    |                       ()))
    |     (eval bindings (literal foo))))
    = yes

'<<SPEC'
