;'<<SPEC'

    -> Tests for functionality "Interpret Robin Program (with Arith)"

### `>` ###

`>` evaluates both of its arguments to numbers, then evaluates to `#t`
if the first number is strictly greater than the second.

    | (display
    |   (> 6 4))
    = #t

    | (display
    |   (> 6 8))
    = #f

    | (display
    |   (> 6 6))
    = #f

`>` expects exactly two arguments, both numbers.

    | (display
    |   (> 14))
    ? uncaught exception: (illegal-arguments (14))

    | (display
    |   (> 14 23 57))
    ? uncaught exception: (illegal-arguments (14 23 57))

    | (display
    |   (> 14 #t))
    ? uncaught exception: (expected-number #t)

    | (display
    |   (> #t 51))
    ? uncaught exception: (expected-number #t)

### `<` ###

`<` evaluates both of its arguments to numbers, then evaluates to `#t`
if the first number is strictly less than the second.

    | (display
    |   (< 6 4))
    = #f

    | (display
    |   (< 6 8))
    = #t

    | (display
    |   (< 6 6))
    = #f

`<` expects exactly two arguments, both numbers.

    | (display
    |   (< 14))
    ? uncaught exception: (illegal-arguments (14))

    | (display
    |   (< 14 23 57))
    ? uncaught exception: (illegal-arguments (14 23 57))

    | (display
    |   (< 14 #t))
    ? uncaught exception: (expected-number #t)

    | (display
    |   (< #t 51))
    ? uncaught exception: (expected-number #t)

### `>=` ###

`>=` evaluates both of its arguments to numbers, then evaluates to `#t`
if the first number is greater than or equal to the second.

    | (display
    |   (>= 6 4))
    = #t

    | (display
    |   (>= 6 8))
    = #f

    | (display
    |   (>= 6 6))
    = #t

`>=` expects exactly two arguments, both numbers.

    | (display
    |   (>= 14))
    ? uncaught exception: (illegal-arguments (14))

    | (display
    |   (>= 14 23 57))
    ? uncaught exception: (illegal-arguments (14 23 57))

    | (display
    |   (>= 14 #t))
    ? uncaught exception: (expected-number #t)

    | (display
    |   (>= #t 51))
    ? uncaught exception: (expected-number #t)

### `<=` ###

`<=` evaluates both of its arguments to numbers, then evaluates to `#t`
if the first number is less than or equal to the second.

    | (display
    |   (<= 6 4))
    = #f

    | (display
    |   (<= 6 8))
    = #t

    | (display
    |   (<= 6 6))
    = #t

`<=` expects exactly two arguments, both numbers.

    | (display
    |   (<= 14))
    ? uncaught exception: (illegal-arguments (14))

    | (display
    |   (<= 14 23 57))
    ? uncaught exception: (illegal-arguments (14 23 57))

    | (display
    |   (<= 14 #t))
    ? uncaught exception: (expected-number #t)

    | (display
    |   (<= #t 51))
    ? uncaught exception: (expected-number #t)

'<<SPEC'

(define > (macro (self args env)
  (bind-args (a b) args env
    (equal? (sign (subtract a b)) 1))))
(define >= (macro (self args env)
  (bind-args (a b) args env
    (if (equal? a b) #t (equal? (sign (subtract a b)) 1)))))
(define < (macro (self args env)
  (bind-args (a b) args env
    (equal? (sign (subtract a b)) (subtract 0 1)))))
(define <= (macro (self args env)
  (bind-args (a b) args env
    (if (equal? a b) #t (equal? (sign (subtract a b)) (subtract 0 1))))))
