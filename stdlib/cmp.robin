;'<<SPEC'

    -> Tests for functionality "Evaluate Robin Expression (with Arith)"

### `gt?` ###

`gt?` evaluates both of its arguments to numbers, then evaluates to `#t`
if the first number is strictly greater than the second.

    | (gt? 6 4)
    = #t

    | (gt? 6 8)
    = #f

    | (gt? 6 6)
    = #f

    | (gt? 1610612736 (subtract 0 1610612736)))
    = #t

    | (gt? (subtract 0 1610612736) 1610612736)
    = #f

    | (gt? 2147483646 2147483647)
    = #f

    | (gt? 1 2147483647)
    = #f

    | (gt? (subtract 0 2147483647) (subtract 0 2147483646))
    = #f

    | (gt? (subtract 0 2147483647) (subtract 0 1))
    = #f

    | (gt? 0 (subtract (subtract 0 1073741824) 1073741824)))
    = #t

`gt?` expects exactly two arguments, both numbers.

    | (gt? 14)
    ? uncaught exception: (illegal-arguments (14))

    | (gt? 14 23 57)
    ? uncaught exception: (illegal-arguments (14 23 57))

    | (gt? 14 #t)
    ? uncaught exception: (expected-number #t)

    | (gt? #t 51)
    ? uncaught exception: (expected-number #t)

### `lt?` ###

`lt?` evaluates both of its arguments to numbers, then evaluates to `#t`
if the first number is strictly less than the second.

    | (lt? 6 4)
    = #f

    | (lt? 6 8)
    = #t

    | (lt? 6 6)
    = #f

    | (lt? 1610612736 (subtract 0 1610612736)))
    = #f

    | (lt? (subtract 0 1610612736) 1610612736)
    = #t

    | (lt? 2147483646 2147483647)
    = #t

    | (lt? 1 2147483647)
    = #t

    | (lt? (subtract 0 2147483647) (subtract 0 2147483646))
    = #t

    | (lt? (subtract 0 2147483647) (subtract 0 1))
    = #t

    | (lt? (subtract (subtract 0 1073741824) 1073741824) 0)
    = #t

`lt?` expects exactly two arguments, both numbers.

    | (lt? 14)
    ? uncaught exception: (illegal-arguments (14))

    | (lt? 14 23 57)
    ? uncaught exception: (illegal-arguments (14 23 57))

    | (lt? 14 #t)
    ? uncaught exception: (expected-number #t)

    | (lt? #t 51)
    ? uncaught exception: (expected-number #t)

### `gte?` ###

`gte?` evaluates both of its arguments to numbers, then evaluates to `#t`
if the first number is greater than or equal to the second.

    | (gte? 6 4)
    = #t

    | (gte? 6 8)
    = #f

    | (gte? 6 6)
    = #t

    | (gte? 1610612736 (subtract 0 1610612736)))
    = #t

    | (gte? (subtract 0 1610612736) 1610612736)
    = #f

`gte?` expects exactly two arguments, both numbers.

    | (gte? 14)
    ? uncaught exception: (illegal-arguments (14))

    | (gte? 14 23 57)
    ? uncaught exception: (illegal-arguments (14 23 57))

    | (gte? 14 #t)
    ? uncaught exception: (expected-number #t)

    | (gte? #t 51)
    ? uncaught exception: (expected-number #t)

### `lte?` ###

`lte?` evaluates both of its arguments to numbers, then evaluates to `#t`
if the first number is less than or equal to the second.

    | (lte? 6 4)
    = #f

    | (lte? 6 8)
    = #t

    | (lte? 6 6)
    = #t

    | (lte? 1610612736 (subtract 0 1610612736)))
    = #f

    | (lte? (subtract 0 1610612736) 1610612736)
    = #t

`lte?` expects exactly two arguments, both numbers.

    | (lte? 14)
    ? uncaught exception: (illegal-arguments (14))

    | (lte? 14 23 57)
    ? uncaught exception: (illegal-arguments (14 23 57))

    | (lte? 14 #t)
    ? uncaught exception: (expected-number #t)

    | (lte? #t 51)
    ? uncaught exception: (expected-number #t)

'<<SPEC'

(define gt? (macro (self args env)
  (bind cmp-same-sign? (macro (self args env)
    (bind-args (a b c) args env
      (equal? (sign (subtract a b)) c)))
    (bind-args (a b) args env
      (if (equal? (sign a) (sign b))
        (cmp-same-sign? a b 1)
        (cmp-same-sign? (subtract (sign a) 1) (subtract (sign b) 1) 1))))))

(define gte? (macro (self args env)
  (bind-args (a b) args env
    (if (equal? a b) #t (gt? a b)))))

(define lt? (macro (self args env)
  (bind cmp-same-sign? (macro (self args env)
    (bind-args (a b c) args env
      (equal? (sign (subtract a b)) c)))
    (bind-args (a b) args env
      (if (equal? (sign a) (sign b))
        (cmp-same-sign? a b (subtract 0 1))
        (cmp-same-sign? (subtract (sign a) 1) (subtract (sign b) 1) (subtract 0 1)))))))

(define lte? (macro (self args env)
  (bind-args (a b) args env
    (if (equal? a b) #t (lt? a b)))))
