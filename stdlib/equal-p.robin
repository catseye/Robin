;'<<SPEC'

### `equal?` ###

    -> Tests for functionality "Interpret core Robin Program"

`equal?` evaluates both of its arguments to arbitrary S-expressions
and compares them for deep equality.

`equal?` works on symbols.

    | (define literal (macro (s a e) (head a)))
    | (display
    |   (equal?
    |     (literal this-symbol)
    |     (literal this-symbol)))
    = #t

    | (define literal (macro (s a e) (head a)))
    | (display
    |   (equal?
    |     (literal this-symbol)
    |     (literal that-symbol)))
    = #f

`equal?` works on lists.

    | (display
    |   (equal? (prepend 1 (prepend 2 (prepend 3 ())))
    |           (prepend 1 (prepend 2 (prepend 3 ())))))
    = #t

`equal?` works on lists, deeply.

    | (display
    |   (equal? (prepend 1 (prepend 2 (prepend 7 ())))
    |           (prepend 1 (prepend 2 (prepend 3 ())))))
    = #f

Two values of different types are never equal.

    | (define literal (macro (s a e) (head a)))
    | (display
    |   (equal? #t
    |            (prepend (literal a) ())))
    = #f

    | (display
    |   (equal? #f
    |           ()))
    = #f

`equal?` expects exactly two arguments, of any type.

'<<SPEC'
