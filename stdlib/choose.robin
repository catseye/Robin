;'<<SPEC'

    -> Tests for functionality "Evaluate Robin Expression (with Small)"

`choose` performs a series of tests and evaluates to the expression
associated with the test that passes.

    | (choose (#t (literal hi)) (else (literal lo)))
    = hi

    | (choose (#f (literal hi)) (#t (literal med)) (else (literal lo)))
    = med

    | (choose (#f (literal hi)) (#f (literal med)) (else (literal lo)))
    = lo

`choose` can have zero tests before the `else`.

    | (choose (else (literal woo)))
    = woo
    
`choose` does require an `else` branch, or else an error value will be
produced.

    | (choose (#f (literal hi)) (#f (literal med)))
    ? uncaught exception

    | (choose)
    ? uncaught exception

Each branch of a `choose` needs to be a two-element list, or else an
error value will be produced.

    | (choose (#t) (else (literal lo)))
    ? uncaught exception

    | (choose (#f 66) (else))
    ? uncaught exception

`choose` is basically equivalent to Scheme's `cond`.

'<<SPEC'

(define-if-absent choose (macro (self args env)
  (bind branch (head args)
    (bind test (head branch)
      (bind then (head (tail branch))
        (if (equal? test (literal else))
          (eval env then)
          (if (eval env test)
            (eval env then)
            (eval env (prepend self (tail args))))))))))
