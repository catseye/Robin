;'<<SPEC'

    -> Tests for functionality "Interpret Robin Program (with Arith)"

`divide` evaluates both of its arguments to numbers and evaluates to the
result of integer division of the first number by the second.  Integer
division computes by what integer the second number can be multiplied
to make it as big as possible without exceeding the first number.

    | (display
    |   (divide 100 3))
    = 33

    | (display
    |   (divide (subtract 0 100) 3))
    = -34

    | (display
    |   (divide 100 (subtract 0 3)))
    = -34

    | (display
    |   (divide 33 33))
    = 1

    | (display
    |   (divide 33 34))
    = 0

    | (display
    |   (divide 10 0))
    ? uncaught exception: (division-by-zero 10)

Division by zero is undefined, and an exception will be raised.

    | (display
    |   (divide 10 0))
    ? uncaught exception: (division-by-zero 10)

`div` expects exactly two arguments, both numbers.

    | (display
    |   (divide 14))
    ? uncaught exception: (illegal-arguments (14))

    | (display
    |   (divide 14 23 57))
    ? uncaught exception: (illegal-arguments (14 23 57))

    | (display
    |   (divide 14 #t))
    ? uncaught exception: (expected-number #t)

    | (display
    |   (divide #t 51))
    ? uncaught exception: (expected-number #t)

'<<SPEC'

;(d is positive)
(define divide-r-pos (fun (self n d acc)
  (if (> d n)
    acc
    (self self (subtract n d) d (add 1 acc)))))

;(d is negative)
(define divide-r-neg (fun (self n d acc)
  (if (> (abs d) n)
    (subtract 0 (add 1 acc))
    (self self (add n d) d (add 1 acc)))))

(define divide (macro (self args env)
  (bind-args (n d) args env
    (if (equal? d 0)
      (raise (list (literal division-by-zero) n))
      (if (< n 0)
        (self (subtract 0 n) (subtract 0 d))
        (if (> d 0)
          (divide-r-pos divide-r-pos n d 0)
          (divide-r-neg divide-r-neg n d 0)))))))
