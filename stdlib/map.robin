;'<<SPEC'

    -> Tests for functionality "Interpret Robin Program (with List)"

`map` evaluates its first argument to obtain a macro, and its second argument
to obtain a list.  It then evaluates to a list which is obtained by applying
the macro to each element of the given list.  The macro is generally assumed
to be a one-argument function.

    | (display
    |   (map (fun (x) (list x)) (literal (three dog night))))
    = ((three) (dog) (night))

While it is possible to pass a macro that is not a function, it is not
very productive.  (Also, it exposes the implementation of `map`, so this
is not a very good test.)

    | (display
    |   (map (macro (self args env) args) (literal (three dog night))))
    = (((head li)) ((head li)) ((head li)))

'<<SPEC'

;(requires empty?)
(define map (fun (app li)
  (bind map-r
    (fun (self app li)
      (if (empty? li)
        ()
        (prepend (app (head li)) (self self app (tail li)))))
    (map-r map-r app li))))
