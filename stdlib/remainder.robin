;'<<SPEC'

    -> Tests for functionality "Execute Robin Program (with Arith)"

`remainder` evaluates both of its arguments to numbers and evaluates to the
remainder of the division of the first number by the second.

    | (display
    |   (remainder 12 3))
    = 0

    | (display
    |   (remainder 11 3))
    = 2

    | (display
    |   (remainder 10 3))
    = 1

    | (display
    |   (remainder 9 3))
    = 0

The remainder is *always positive*.

    | (display
    |   (remainder (subtract 0 10) 3))
    = 2

    | (display
    |   (remainder 10 (subtract 0 3)))
    = 2

Trying to find the remainder of a division by zero is undefined, and an
exception will be raised.

    | (display
    |   (remainder 10 0))
    ? uncaught exception: (division-by-zero 10)

`remainder` expects exactly two arguments, both numbers.

    | (display
    |   (remainder 14))
    ? uncaught exception: (illegal-arguments (14))

    | (display
    |   (remainder 14 23 57))
    ? uncaught exception: (illegal-arguments (14 23 57))

    | (display
    |   (remainder 14 #t))
    ? uncaught exception: (expected-number #t)

    | (display
    |   (remainder #t 51))
    ? uncaught exception: (expected-number #t)

'<<SPEC'

;(d is positive)
(define remainder-r-pos (fun (self n d acc)
  (if (> d n)
    n
    (self self (subtract n d) d (add 1 acc)))))

;(d is negative)
(define remainder-r-neg (fun (self n d acc)
  (if (> (abs d) n)
    (add 1 n)
    (self self (add n d) d (add 1 acc)))))

(define remainder (macro (self args env)
  (bind-args (n d) args env
    (if (equal? d 0)
      (raise (list (literal division-by-zero) n))
      (if (< n 0)
        (self (subtract 0 n) (subtract 0 d))
        (if (> d 0)
          (remainder-r-pos remainder-r-pos n d 0)
          (remainder-r-neg remainder-r-neg n d 0)))))))
