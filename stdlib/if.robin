(define if (@macro (self args macro-env)
  (choose
    ((@equal? args ())
      (@raise (list (literal illegal-arguments) args)))
    ((@equal? (@tail args) ())
      (@raise (list (literal illegal-arguments) args)))
    ((@equal? (@tail (@tail args)) ())
      (@raise (list (literal illegal-arguments) args)))
    ((@equal? (@tail (@tail (@tail args))) ())
      (@eval macro-env (list (literal @if)
                         (@head args)
                         (@head (@tail args))
                         (@head (@tail (@tail args))))))
    (else
      (@raise (list (literal illegal-arguments) args))))))

;'XXX'

    -> Tests for functionality "Interpret Robin Program (with Small)"

`if` is a wrapper for the `@if` intrinsic, for which it provides predictable
failure modes.  In non-failure modes, `if` should have semantics identical
to `@if`.

The second and third arguments can be arbitrary expressions, but `if`
expects its first argument to be a boolean.

    | (display
    |   (if 5 7 9))
    ? uncaught exception: (expected-boolean 5)

`if` expects exactly three arguments.

    | (display
    |   (if #t 7))
    ? uncaught exception: (illegal-arguments (#t 7))

    | (display
    |   (if #t 7 8 9))
    ? uncaught exception: (illegal-arguments (#t 7 8 9))

'XXX'
