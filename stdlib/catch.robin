(define catch (@macro (self args macro-env)
  (choose
    ((@equal? args ())
      (@raise (list (literal illegal-arguments) args)))
    ((@equal? (@tail args) ())
      (@raise (list (literal illegal-arguments) args)))
    ((@equal? (@tail (@tail args)) ())
      (@raise (list (literal illegal-arguments) args)))
    ((@equal? (@tail (@tail (@tail args))) ())
      (@if (symbol? (@head args))
        (@eval (env) (list (literal @catch)
                           (@head args)
                           (@head (@tail args))
                           (@head (@tail (@tail args)))))
        (@raise (list (literal illegal-arguments) args))))
    (else
      (@raise (list (literal illegal-arguments) args))))))

;'XXX'

    -> Tests for functionality "Interpret Robin Program (with Small)"

`catch` is a wrapper for the `@catch` intrinsic, for which it provides
predictable failure modes.  In non-failure modes, `catch` should have
semantics identical to `@catch`.

`catch` expects its first argument to be a symbol.

    | (display
    |   (catch #f 23 (head #f)))
    ? uncaught exception: (illegal-arguments (#f 23 (head #f)))

`catch` expects exactly three arguments.

    | (display
    |   (catch error error))
    ? uncaught exception: (illegal-arguments (error error))

    | (display
    |   (catch error error (head #f) 23))
    ? uncaught exception: (illegal-arguments (error error (head #f) 23))

`catch` can catch exceptions raised by builtin wrappers.

    | (display
    |   (catch error (list error 5)
    |     (head #f)))
    = ((expected-list #f) 5)

'XXX'