;'<<SPEC'

### `catch` ###

    -> Tests for functionality "Evaluate Robin Expression (with literal and list)"

`catch` handles abort values.  It takes 5 arguments.  It
evaluates the first argument to a value.  If the value is an
abort value, a new environment is created where the payload of
the abort value is bound to the name provided in the second
argument, and in this environment the third argument is evaluated,
and this is the result of the `catch` expression.  On the other
hand, if the value is not an abort value, a new environment is
created where the value is bound to the name provided in the
fourth argument, and the fifth argument is evaluated.

    | (catch
    |   (literal (nice-value 999999))
    |   error (list error #f)
    |   value (list value #t))
    = ((nice-value 999999) #t)

    | (catch
    |   (raise (literal (nasty-value 999999)))
    |   error (list error #f)
    |   value (list value #t))
    = ((nasty-value 999999) #f)

If an abort is returned from the body of a macro that is applied
in the context of a `catch`, it will still be catched.

    | (catch
    |   ((macro (self args env) (raise (literal (nasty-value 1111)))) joe)
    |   error (list error #f)
    |   value (list value #t))
    = ((nasty-value 1111) #f)

Abort values are just values, so the innermost `catch` will handle
an abort value.

    | (catch
    |   (catch
    |     (raise (literal (nasty-value 999999)))
    |     error (list error #f)
    |     value (list value #t))
    |   error (list error #f)
    |   value (list value #t))
    = (((nasty-value 999999) #f) #t)

If an inner `catch` returns an abort value itself, an outer `catch` can
handle the abort value it returned.

    | (catch
    |   (catch
    |     (raise (literal (nasty-value 999999)))
    |     error (raise error)
    |     value (list value #t))
    |   error (list error 123)
    |   value (list value #t))
    = ((nasty-value 999999) 123)

`catch` expects its first argument to be a symbol.

    | (catch (3 4) (list error #f) 42)
    ? uncaught exception: (illegal-arguments ((3 4) (list error #f) 42))

`catch` expects exactly five arguments.

    | (catch error (list error #f))
    ? uncaught exception: (illegal-arguments (error (list error #f)))

    | (catch error (list error #f) 42 43)
    ? uncaught exception: (illegal-arguments (error (list error #f) 42 43))

    | (catch error (list error #f) 42 43 44 45)
    ? uncaught exception: (illegal-arguments (error (list error #f) 42 43 44 45))

    -> Tests for functionality "Evaluate Robin Expression (with Small)"

`catch` handles abort values, and this does not include the environment
in which the abort value was produced.

    | (catch
    |   (bind flop 1
    |     (raise 2))
    |   error (list flop error)
    |   value (list 123 value))
    ? uncaught exception: (unbound-identifier flop)

`catch` handles abort values, and this does not include the environment
in which the abort value was produced.

    | (bind flop (fun (x) (raise x))
    |   (list
    |     (catch (flop 44) error (list 55 error) value value)
    |     (catch (flop 44) error (list 66 error) value value)))
    = ((55 44) (66 44))

'<<SPEC'

(require catch)
