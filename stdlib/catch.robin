;'<<SPEC'

### `catch` ###

FIXME: These tests should ideally be for expressions in the Robin Expression Language
rather than programs in the Robin Toplevel Language.

    -> Tests for functionality "Execute core Robin Toplevel Program"

`catch` installs an exception handler.

If an exception is raised when evaluating the final argument of
`catch`, the exception value is bound to the symbol given as the
first argument of `catch`, and the second argument of `catch` is
evaluated in that new environment.

    | (define literal (macro (s a e) (head a)))
    | (define list (macro (self args env)
    |   (if (equal? args ())
    |     ()
    |     (prepend (eval env (head args))
    |               (eval env (prepend self (tail args)))))))
    | (display
    |   (catch error (list error #f)
    |     (raise (literal (nasty-value 999999)))))
    = ((nasty-value 999999) #f)

`catch` *cannot necessarily* catch exceptions raised by intrinsics.
It ought to be able to catch exceptions raised by intrinsics wrappers,
though.

The innermost `catch` will catch the exception.

    | (define literal (macro (s a e) (head a)))
    | (define list (macro (self args env)
    |   (if (equal? args ())
    |     ()
    |     (prepend (eval env (head args))
    |               (eval env (prepend self (tail args)))))))
    | (display
    |   (catch error (list error 5)
    |     (catch error (list error 9)
    |       (raise (literal derpy-value)))))
    = (derpy-value 9)

An exception raised from within an exception handler is
caught by the next innermost exception handler.

    | (define list (macro (self args env)
    |   (if (equal? args ())
    |     ()
    |     (prepend (eval env (head args))
    |               (eval env (prepend self (tail args)))))))
    | (display
    |   (catch error (list error 5)
    |     (catch error (list error 9)
    |       (catch error (raise (list error error))
    |         (raise 7)))))
    = ((7 7) 9)

`catch` expects its first argument to be an identifier.

`catch` expects exactly three arguments.

TODO we should probably have some tests that prove that `catch` can
catch errors raised from inside macros.

'<<SPEC'

(require catch)
