(robin (0 1) ((small (0 1) *))
  (let (
    (empty? (fun (li)
      (equal? li ())))
    (map (fun (app li)
      (bind map-r
        (fun (self app li)
          (if (empty? li)
            ()
            (prepend (app (head li)) (self self app (tail li)))))
        (map-r map-r app li))))
    (fold (fun (app acc li)
      (bind fold-r (fun (self app acc li)
        (if (empty? li)
          acc
          (self self app (app (head li) acc) (tail li))))
        (fold-r fold-r app acc li))))
    (reverse (fun (li)
      (fold prepend () li)))
    (filter (fun (pred li)
      (reverse (fold
        (fun (x acc) (if (pred x) (prepend x acc) acc))
        () li))))
    (find (fun (pred li)
      (bind find-r (fun (self pred li)
        (if (empty? li)
          ()
          (if (pred (head li))
            (list (head li))
            (self self pred (tail li)))))
        (find-r find-r pred li))))
    (append (fun (li new-tail)
      (bind append-r (fun (self li new-tail)
        (if (empty? li)
          new-tail
          (prepend (head li) (self self (tail li) new-tail))))
      (append-r append-r li new-tail))))
    (elem? (fun (item li)
      (bind elem?-r (fun (self item li)
        (if (empty? li)
          #f
          (if (equal? item (head li))
            #t
            (self self item (tail li)))))
      (elem?-r elem?-r item li))))
    (length (fun (li)
      (subtract 0 (fold (fun (x acc) (subtract acc 1)) 0 li))))
    (index (fun (index li)
      (bind index-r (fun (self index li)
        (if (equal? index 0)
          (head li)
          (self self (subtract index 1) (tail li))))
      (index-r index-r index li))))
    (take-while (fun (pred li)
      (bind take-while-r (fun (self pred li)
        (if (empty? li)
          ()
          (if (pred (head li))
            (prepend (head li) (self self pred (tail li)))
            ())))
        (take-while-r take-while-r pred li))))
    (drop-while (fun (pred li)
      (bind drop-while-r (fun (self pred li)
        (if (empty? li)
          ()
          (if (pred (head li))
            (self self pred (tail li))
            li)))
        (drop-while-r drop-while-r pred li))))
    (first (fun (n li)
      (bind first-r (fun (self n li)
        (if (equal? n 0)
          ()
          (prepend (head li) (self self (subtract n 1) (tail li)))))
        (first-r first-r n li))))
    (rest (fun (n li)
      (bind rest-r (fun (self n li)
        (if (equal? n 0)
          li
          (self self (subtract n 1) (tail li))))
        (rest-r rest-r n li))))
    (last (fun (n li)
      (reverse (first n (reverse li)))))
    (prefix? (fun (la lb)
      (bind prefix?-r (fun (self la lb)
        (if (empty? la)
          #t
          (if (empty? lb)
            #f
            (if (equal? (head la) (head lb))
              (self self (tail la) (tail lb))
              #f))))
        (prefix?-r prefix?-r la lb))))
    (flatten (fun (li)
      (bind flatten-r (fun (self li acc)
        (if (empty? li)
          acc
          (if (list? (head li))
            (self self (tail li) (self self (head li) acc))
            (self self (tail li) (prepend (head li) acc)))))
        (reverse (flatten-r flatten-r li ())))))
    (lookup (fun (id alist)
      (bind lookup-r (fun (self id alist)
        (if (empty? alist)
          ()
          (if (equal? id (head (head alist)))
            (list (head (tail (head alist))))
            (self self id (tail alist)))))
        (lookup-r lookup-r id alist))))
    (extend (fun (id val alist)
      (prepend (list id val) alist)))
    (delete (fun (id alist)
      (filter (fun (x) (if (equal? (head x) id) #f #t)) alist)))
    )
    (list
      (list (literal list) list)
      (list (literal empty?) empty?)
      (list (literal map) map)
      (list (literal fold) fold)
      (list (literal reverse) reverse)
      (list (literal filter) filter)
      (list (literal find) find)
      (list (literal append) append)
      (list (literal elem?) elem?)
      (list (literal length) length)
      (list (literal index) index)
      (list (literal take-while) take-while)
      (list (literal drop-while) drop-while)
      (list (literal first) first)
      (list (literal rest) rest)
      (list (literal last) last)
      (list (literal prefix?) prefix?)
      (list (literal flatten) flatten)
      (list (literal lookup) lookup)
      (list (literal extend) extend)
      (list (literal delete) delete)
    )
  )
)
