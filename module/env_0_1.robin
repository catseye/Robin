(robin (0 . 1) (small (0 . 1) list (0 . 1))
  (let (
    (env? (fun (li)
      (bind env?-r (fun (self li)
        (if (empty? li)
          #t
          (if (pair? li)
            (bind binding (head li)
              (if (pair? binding)
                (if (symbol? (head binding))
                  (self self (tail li))
                  #f)
                #f))
            #f)))
        (env?-r env?-r li))))
    (unbind
      (macro (self args env)
        (eval (filter (fun (binding) (if (equal? (head binding) (head args)) #f #t)) env)
              (head (tail args)))))
    (sandbox
      (macro (self args env)
        (eval (filter (fun (binding) (elem (head binding) (head args))) env)
              (head (tail args)))))
    (export
      (macro (self args env)
        (filter (fun (binding) (elem (head binding) args)) env)))
    )
    (export env? unbind sandbox export)
  )
)

