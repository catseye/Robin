(robin (0 1) ((core (0 1) *))
  (eval
    (prepend
      (prepend ((macro (self args env) (head args)) literal) (prepend (macro (self args env) (head args)) ()))
      (prepend
        (prepend ((macro (self args env) (head args)) bind)
          (prepend (macro (self args env)
                     (eval
                       (prepend (prepend (head args) (prepend (eval env (head (tail args))) ())) env)
                       (head (tail (tail args))))) ()))
        (prepend
          (prepend ((macro (self args env) (head args)) env) (prepend (macro (self args env) env) ()))
          ((macro (self args env) env))
        )
      )
    )
    ((macro (self args env) (head args))
      (bind let (macro (self args env)
        (bind bindings (head args)
          (if (equal? bindings ())
            (eval env (head (tail args)))
            (bind binding (head bindings)
              (bind name (head binding)
                (bind value (eval env (head (tail binding)))
                  (bind newenv (prepend (prepend name (prepend value ())) env)
                    (bind newbindings (tail bindings)
                      (bind newargs (prepend newbindings (tail args))
                        (eval newenv (prepend self newargs)))))))))))
        (let
          (
            (list (macro (self args env)
              (if (equal? args ())
                ()
                (prepend (eval env (head args))
                         (eval env (prepend self (tail args)))))))
            (choose (macro (self args env)
              (let
                ((branch (head args))
                 (test   (head branch))
                 (then   (head (tail branch))))
                (if (equal? test (literal else))
                  (eval env then)
                  (if (eval env test)
                    (eval env then)
                    (eval env (prepend self (tail args))))))))
            (fun (macro (self args env)
              (let ((formals (head args))
                    (body (head (tail args)))
                    (make-env (macro (self args env)
                      (let (
                             (closed-env (head args))
                             (fun-env (head (tail args)))
                             (formals (head (tail (tail args))))
                             (actuals (head (tail (tail (tail args)))))
                           )
                        (if (equal? formals ())
                          closed-env
                          (let (
                                (value (eval fun-env (head actuals)))
                                (new-closed-env (prepend (prepend (head formals) (prepend value ())) closed-env))
                                (new-args (prepend new-closed-env (prepend fun-env (prepend (tail formals) (prepend (tail actuals) ())))))
                               )
                            (eval env
                              (prepend self new-args)))))))
                    (make-env-wrap (macro (self args env)
                      (let (
                             (closed-env (eval env (head args)))
                             (fun-env (eval env (head (tail args))))
                             (formals (eval env (head (tail (tail args)))))
                             (actuals (eval env (head (tail (tail (tail args))))))
                             (new-args (prepend closed-env (prepend fun-env (prepend formals (prepend actuals ())))))
                           )
                        (eval env
                          (prepend make-env new-args))))))
                (macro (fun-self actuals fun-env)
                  (eval (make-env-wrap env fun-env formals actuals) body)))))
          )
          (env)
        )
      )
    )
  )
)
