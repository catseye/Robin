(robin (0 1) ((small (0 1) *))
  ;''Should really be a part of small, but prototyping
     it here now.''
  (let (
    (bind-args
      (macro (self args env)
        (let (
          (id-list       (head args))
          (orig-val-list (eval env (head (tail args))))
          (given-env     (eval env (head (tail (tail args)))))
          (expr          (head (tail (tail (tail args)))))
          (bind-args-r   (macro (self args env)
            (let (
              (id-list  (eval env (head args)))
              (val-list (eval env (head (tail args))))
              (env-acc  (eval env (head (tail (tail args)))))
              )
              (if (equal? id-list ())
                (if (equal? val-list ())
                  env-acc
                  (raise (list (literal illegal-arguments) orig-val-list)))
                (if (equal? val-list ())
                  (raise (list (literal illegal-arguments) orig-val-list))
                  (self
                    (tail id-list) (tail val-list)
                    (prepend
                      (list (head id-list) (eval given-env (head val-list)))
                      env-acc)))))))
          (new-env (bind-args-r id-list orig-val-list env))
          )
          (eval new-env expr))))
    )
    (list
      (list (literal bind-args) bind-args)
    )))