(robin (0 1) ((small (0 1) *) (env (0 1) *))
  (let (
    (+ (fun (a b)
      (subtract a (subtract 0 b))))
    (sum-r (fun (self li)
      (if (equal? li ())
        0
        (+ (head li) (self self (tail li))))))
    (sum (fun (li)
      (sum-r sum-r li)))
    (- (fun (a b)
      (subtract a b)))
    (* (fun (a b)
      (if (equal? b 0) 0 (divide a (divide 1 b)))))
    (product-r (fun (self li)
      (if (equal? li ())
        1
        (* (head li) (self self (tail li))))))
    (product (fun (li)
      (product-r product-r li)))
    (/ (fun (a b)
      (divide a b)))
    (abs (fun (a)
      (* a (sign a))))
    (frac (fun (a)
      (subtract (abs a) (floor (abs a)))))
    (integer? (fun (a)
      (equal? (frac a) 0)))
    (div (fun (a b)
      (floor (/ (floor a) (floor b)))))
    (rem (fun (a b)
      (- a (* (div a b) b))))
    (> (fun (a b)
      (equal? (sign (- a b)) 1)))
    (>= (fun (a b)
      (if (equal? a b) #t (equal? (sign (- a b)) 1))))
    (< (fun (a b)
      (equal? (sign (- a b)) (- 0 1))))
    (<= (fun (a b)
      (if (equal? a b) #t (equal? (sign (- a b)) (- 0 1)))))
    (natural? (fun (a)
      (if (equal? (frac a) 0) (>= a 0) #f)))
    )
    (export + sum - * product / abs frac integer? div rem > >= < <= natural?)))
