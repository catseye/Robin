(robin (0 . 1) (small (0 . 1) env (0 . 1))
  (let (
    (- (fun (a b)
      (subtract a b)))
    (+ (fun (a b)
      (subtract a (subtract 0 b))))
    (/ (fun (a b)
      (divide a b)))
    (* (fun (a b)
      (if (equal? b 0) 0 (divide a (divide 1 b)))))
    (abs (fun (a)
      (* a (sign a))))
    (frac (fun (a)
      (subtract (abs a) (floor (abs a)))))
    (integer? (fun (a)
      (equal? (frac a) 0)))
    (div (fun (a b)
      (floor (divide (floor a) (floor b)))))
    (rem (fun (a b)
      (subtract a (* (div a b) b))))
    )
    (export + - * / abs frac integer? div rem)))
