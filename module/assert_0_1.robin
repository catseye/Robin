(robin (0 1) ((small (0 1) *) (env (0 1) *) (arith (0 1) *))
  (let (
    (assert (macro (self args env)
      (let ((expr (head args))
            (body (head (tail args))))
        (if (eval env expr)
          (eval env body)
          (raise (list (literal assertion-failed) expr))))))
    (mk-assert (fun (pred message)
      (macro (self args env)
        (let ((expr (head args))
              (body (head (tail args))))
          (if (pred (eval env expr))
            (eval env body)
            (raise (list message expr)))))))
    (assert-boolean (mk-assert boolean? (literal expected-boolean)))
    (assert-number (mk-assert number? (literal expected-number)))
    (assert-symbol (mk-assert symbol? (literal expected-symbol)))
    (assert-list (mk-assert list? (literal expected-list)))
    (assert-macro (mk-assert macro? (literal expected-macro)))
    (assert-integer (mk-assert integer? (literal expected-integer)))
    (assert-natural (mk-assert natural? (literal expected-natural)))
    )
    (export assert assert-boolean assert-number assert-symbol
            assert-macro assert-list)))
