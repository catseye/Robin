(robin (0 1) ((small (0 1) *) (list (0 1) *))
  (let (
    (subst (fun (src dest sexp)
      (bind subst-r (fun (self src dest sexp)
        (choose
          ((equal? sexp src)
            dest)
          ((empty? sexp)
            ())
          ((list? sexp)
            (prepend (self self src dest (head sexp))
                     (self self src dest (tail sexp))))
          (else
            sexp)))
        (subst-r subst-r src dest sexp))))
    (subst-many (fun (alist sexp)
      (fold (fun (binding sexp)
              (subst (head binding) (head (tail binding)) sexp)) sexp alist)))
    (literal-with (macro (self args env)
      (let (
        (alist (head args))
        (body  (head (tail args)))
        )
        (fold (fun (binding sexp)
                (subst (head binding) (eval env (head (tail binding))) sexp))
              body alist))))
    (cast-r (fun (self marker fn sexp)
      (choose
        ((empty? sexp)
          ())
        ((list? sexp)
          (if (equal? (head sexp) marker)
            (fn (head (tail sexp)))
            ;else
            (prepend (self self marker fn (head sexp))
                     (self self marker fn (tail sexp)))))
        (else
          sexp))))
    (cast (macro (self args env)
      (cast-r cast-r (head args)
                     (fun (e) (eval env e))
                     (head (tail args)))))
    )
    (list
      (list (literal subst)        subst)
      (list (literal subst-many)   subst-many)
      (list (literal literal-with) literal-with)
      (list (literal cast)         cast)
    )
  )
)
