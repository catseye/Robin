-> encoding: UTF-8

Miscellanous Module Tests
=========================

-> Functionality "Interpret Bundled Robin Program" is implemented by
-> shell command "bin/unbundle_modules.py %(test-file)"

-> Tests for functionality "Interpret Bundled Robin Program"

This document contains miscellaneous tests for module functionality;
tests that require multiple modules be loaded, and so forth.

Modules are cached, so that a module referenced by two other modules
is not loaded twice.

| ----- module a 0.1
| (robin (0 1) ((small (0 1) *) (random (0 1) *))
|   (pair (pair (literal random-a) random) ()))
| ----- module b 0.1
| (robin (0 1) ((small (0 1) *) (random (0 1) *))
|   (pair (pair (literal random-b) random) ()))
| ----- main
| (robin (0 1) ((core (0 1) *) (a (0 1) *) (b (0 1) *))
|   (equal? random-a random-b))
= #t

Circular module imports produce an error rather than going into an infinite
loop.

| ----- module a 0.1
| (robin (0 1) ((small (0 1) *) (b (0 1) *))
|   (pair (pair (literal literal-a) literal-b) ()))
| ----- module b 0.1
| (robin (0 1) ((small (0 1) *) (a (0 1) *))
|   (pair (pair (literal literal-b) literal-a) ()))
| ----- main
| (robin (0 1) ((core (0 1) *) (a (0 1) *))
|   (equal? literal-a literal-b))
? robin: circular reference in module a

-> Functionality "Interpret Robin Program" is implemented by
-> shell command "bin/robin %(test-file)"

-> Tests for functionality "Interpret Robin Program"

`and` is short-circuiting.

| (robin (0 1) ((small (0 1) *) (boolean (0 1) *) (concurrency (0 1) *) (crude-io (0 1) *))
|   (let ((true
|          (fun () (call! crude-output write (literal t) reply #t)))
|         (false
|          (fun () (call! crude-output write (literal f) reply #f))))
|     (and (true) (false) (false) (true))))
= t
= f
= #f

`or` is short-circuiting.

| (robin (0 1) ((small (0 1) *) (boolean (0 1) *) (concurrency (0 1) *) (crude-io (0 1) *))
|   (let ((true
|          (fun () (call! crude-output write (literal t) reply #t)))
|         (false
|          (fun () (call! crude-output write (literal f) reply #f))))
|     (or (false) (true) (true) (false))))
= f
= t
= #t
