-> encoding: UTF-8

Module `env`
============

-> Functionality "Interpret Robin Program" is implemented by
-> shell command "bin/robin %(test-file)"

-> Tests for functionality "Interpret Robin Program"

The `env` module exports macros for examining and manipulating evaluation
environments and, to the extent they are represented as binding alists,
binding alists.

### `env?` ###

`env?` evaluates its single argument, and evaluates to `#t` if
and only if it is a well-formed binding alist.

| (robin (0 . 1) (small (0 . 1) env (0 . 1))
|   (env? (literal ((a . 1) (b . 2) (c . 3)))))
= #t

| (robin (0 . 1) (small (0 . 1) env (0 . 1))
|   (env? (literal ((a . 1) (999 . 2) (c . 3)))))
= #f

| (robin (0 . 1) (small (0 . 1) env (0 . 1))
|   (env? (literal ((a . 1) (b . 2) . c))))
= #f

| (robin (0 . 1) (small (0 . 1) env (0 . 1))
|   (env? 7))
= #f

| (robin (0 . 1) (small (0 . 1) env (0 . 1))
|   (env? (env)))
= #t

### `unbind` ###

`unbind` removes the given identifier from the environment and evaluates its
second argument in that reduced environment.

| (robin (0 . 1) (small (0 . 1) env (0 . 1))
|   (unbind if (if #t (literal x) (literal y))))
? robin: uncaught exception: (unbound-identifier . if)

`unbind` removes all trace of binding from the given identifier; if that
identifier has several definitions that are shadowed, none of them will be
in effect.

| (robin (0 . 1) (small (0 . 1) env (0 . 1))
|   (let ((x 7))
|     (let ((x 8))
|       (unbind x
|         x))))
? robin: uncaught exception: (unbound-identifier . x)

### `sandbox` ###

`sandbox` takes a list of identifiers as its first argument, and evaluates
its second argument in an environment where all bindings *except* those
for the listed identifiers have been unbound.

| (robin (0 . 1) (small (0 . 1) env (0 . 1))
|   (sandbox (pair tail)
|     (tail (pair 8 9))))
= 9

| (robin (0 . 1) (small (0 . 1) env (0 . 1))
|   (sandbox (pair tail)
|     (head (pair 8 9))))
? robin: uncaught exception: (unbound-identifier . head)

### `export` ###

`export` treats its arguments as a list of identifiers, and returns an
environment where only those identifiers are bound to values.

The original idea for `sandbox` was that it could be used in the body of
a module to restrict the visible identifiers to those the module wished
to export, which could then actually be exported with `env`.  However,
this still required `env` to be a visible identifier (and thus exported.)
`export` simply evaluates to a binding alist which can be returned
directly.

Note: the order of the bindings in the binding alist isn't guaranteed;
these tests should be rewritten to search the resulting alist.

| (robin (0 . 1) (small (0 . 1) env (0 . 1))
|   (let ((a 1) (b 2))
|     (export a b)))
= ((b . 2) (a . 1))

| (robin (0 . 1) (small (0 . 1) env (0 . 1))
|   (export pair tail))
= ((tail . (builtin tail)) (pair . (builtin pair)))

### `bindings-for` ###

`bindings-for` evaluates its single argument to a symbol, then returns a
list (possibly empty) of all the values to which that identifier is bound in
the current environment.  The first (if any) value in the list is the value
that it is currently bound to; the rest are shadowed (and are arranged
in the order in which they were shadowed.)

| (robin (0 . 1) (small (0 . 1) env (0 . 1))
|   (bindings-for (literal shoggoth)))
= ()

| (robin (0 . 1) (small (0 . 1) env (0 . 1))
|   (bind q 900
|     (bindings-for (literal q))))
= (900)

| (robin (0 . 1) (small (0 . 1) env (0 . 1))
|   (bind q 900
|     (bind p 800
|       (bind q 700
|         (bindings-for (literal q))))))
= (700 900)

### Re-exported Functions ###

Because it would be reasonable to find them here by categorization,
this module re-exports the macro `env` from `core`, and `bind` and `let`
from `small`.

| (robin (0 . 1) (env (0 . 1))
|   (env? (env)))
= #t

| (robin (0 . 1) (env (0 . 1))
|   (bind a 1 a))
= 1

| (robin (0 . 1) (env (0 . 1))
|   (let ((a 7) (b a)) b))
= 7
