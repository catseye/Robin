-> encoding: UTF-8

Module `list`
=============

-> Functionality "Interpret Robin Program" is implemented by
-> shell command "bin/robin %(test-file)"

-> Tests for functionality "Interpret Robin Program"

### `list` ###

| (robin (0 . 1) (small (0 . 1) list (0 . 1))
|   (list 1 2 3 4 5))
= (1 2 3 4 5)

| (robin (0 . 1) (small (0 . 1) list (0 . 1))
|   (list (pair 2 3) (pair 6 7)))
= ((2 . 3) (6 . 7))

| (robin (0 . 1) (small (0 . 1) list (0 . 1))
|   (list))
= ()

### `empty?` ###

| (robin (0 . 1) (small (0 . 1) list (0 . 1))
|   (empty? (literal symbol)))
= #f

| (robin (0 . 1) (small (0 . 1) list (0 . 1))
|   (empty? ()))
= #t

### `list?` ###

| (robin (0 . 1) (small (0 . 1) list (0 . 1))
|   (list? (literal symbol)))
= #f

| (robin (0 . 1) (small (0 . 1) list (0 . 1))
|   (list? ()))
= #t

| (robin (0 . 1) (small (0 . 1) list (0 . 1))
|   (list? (literal (a b c))))
= #t

| (robin (0 . 1) (small (0 . 1) list (0 . 1))
|   (list? (pair 1 2)))
= #f

### `map` ###

| (robin (0 . 1) (small (0 . 1) list (0 . 1))
|   (map (fun (x) (list x)) (literal (three dog night))))
= ((three) (dog) (night))

### `fold` ###

### `reverse` ###

| (robin (0 . 1) (small (0 . 1) list (0 . 1))
|   (reverse (literal (1 2 3 4 5))))
= (5 4 3 2 1)

### `filter` ###

| (robin (0 . 1) (small (0 . 1) list (0 . 1))
|   (filter (fun (x) (symbol? x)) (literal (1 two #f 3 () four 5 six))))
= (two four six)

### `first` ###

| (robin (0 . 1) (small (0 . 1) list (0 . 1))
|   (first (fun (x) (symbol? x)) ()))
= ()

| (robin (0 . 1) (small (0 . 1) list (0 . 1))
|   (first (fun (x) (symbol? x)) (list 1 2 3)))
= ()

| (robin (0 . 1) (small (0 . 1) list (0 . 1))
|   (first (fun (x) #t) (list 1 2 3)))
= (1)

| (robin (0 . 1) (small (0 . 1) list (0 . 1))
|   (first (fun (x) (symbol? x)) (literal (1 two #f 3 () four 5 six))))
= (two)
