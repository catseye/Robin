(robin (0 . 1) (small (0 . 1)
                list (0 . 1)
                boolean (0 . 1)
                concurrency (0 . 1)
                arith (0 . 1)
                random (0 . 1)
                crude-io (0 . 1)
                term (0 . 1))
  ;''Beginnings of an implementation of Hunt the Wumpus.''
  (let
    (
      (caverns (literal (
        ( 0  0  0) ;(to make it 1-based)
        ( 2  5  8)
        ( 1  3 10)
        ( 2  4 12)
        ( 3  5 14)
        ( 1  4  6)
        ( 5  7 15)
        ( 6  8 17)
        ( 1  7  9)
        ( 8 10 18)
        ( 2  9 11)
        (10 12 19)
        ( 3 11 13)
        (12 14 20)
        ( 4 13 15)
        ( 6  4 16)
        (15 17 20)
        ( 7 16 18)
        ( 9 17 19)
        (11 18 20)
        (13 16 19)
      )))
      (get-random-room (fun () (call random range (list 1 20) value value)))
      (initial-room (get-random-room))
      (initial-wumpus (get-random-room))
      (initial-bats (list (get-random-room) (get-random-room)))
      (initial-pits (list (get-random-room) (get-random-room)))
      (initial-arrows 5)
      (print (macro (self args env)
        (bind subst-env
          (map
            (fun (binding)
              (pair (list (literal ?) (head binding)) (tail binding)))
            env)
          (call crude-output write
            (subst-many subst-env (head args)) result
              (eval env (head (tail args)))))))
      (main (fun (self room wumpus bats pits arrows)
        (let
          (
            (tunnels (index room caverns))
            (unrecognized-command (fun ()
              (print (unrecognized command --
                      try (m room) or (s room1 room2 etc))
                (self self room wumpus bats pits arrows))))
            (report-room (fun (room)
              (filter (fun (x) (not (empty? x)))
                (list
                  (if (equal? room wumpus) (literal (you smell a wumpus)) ())
                  (if (elem? room bats) (literal (fluttering of bat wings nearby)) ())
                  (if (elem? room pits) (literal (you feel a draft)) ())))))
            (report-nearby (fun (self rooms)
              (if (empty? rooms)
                ()
                (bind report (report-room (head rooms))
                  (if (empty? report)
                    (self self (tail rooms))
                    (print (? report) (self self (tail rooms))))))))
          )
          (print (you are in room (? room) with (? arrows) arrows --
                  tunnels lead to rooms (? tunnels))
            (choose
              ((equal? arrows 0)
                (print (no arrows left mister sitting duck)
                  #f))
              ((elem? room bats)
                (print (ZAP super bat snatch -- elsewheresville for you)
                  (self self (get-random-room) wumpus bats pits arrows)))
              ((elem? room pits)
                (print (YIIIEEEEEE -- fell in a bottomless pit)
                  #f))
              ((equal? room wumpus)
                ;(TODO wumpus move routine)
                (print (you stumbled upon the wumpus and it ATE YOU UP)
                  #f))
              (else
                (bind whudeva (report-nearby report-nearby tunnels)
                  (recv entered
                    (choose
                      ((equal? entered (literal eof))
                        (print (gave up eh? no wumpus for you)
                          #f))
                      ((list? entered)
                        (bind command (head entered)
                          (choose
                            ((equal? command (literal m))
                              (bind dest (head (tail entered))
                                (if (elem? dest tunnels)
                                  (self self dest wumpus bats pits arrows)
                                  (print (no tunnel in that direction)
                                    (self self room wumpus bats pits arrows)))))
                            ((equal? command (literal s))
                              (bind itinerary (tail entered)
                                (if (> (length itinerary) 5)
                                  (print (your arrows have a maximum range of 5 rooms)
                                    (self self room wumpus bats pits arrows))
                                  (print (todo lets fire that thing (? itinerary))
                                    ;(TODO wumpus move routine)
                                    (self self room wumpus bats pits (subtract arrows 1))))))
                            (else
                              (unrecognized-command)))))
                      (else
                        (unrecognized-command)))))))))))
    )
    (call crude-input subscribe () x
      (main main initial-room initial-wumpus initial-bats
                 initial-pits initial-arrows))))
