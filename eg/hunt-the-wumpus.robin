(robin (0 . 1) (small (0 . 1)
                list (0 . 1)
                boolean (0 . 1)
                concurrency (0 . 1)
                arith (0 . 1)
                random (0 . 1)
                crude-io (0 . 1)
                term (0 . 1))
  ;''Beginnings of an implementation of Hunt the Wumpus.
  The !'s aren't quite consistent in this yet.''
  (let
    (
      (caverns (literal (
        ( 0  0  0) ;(to make it 1-based)
        ( 2  5  8)
        ( 1  3 10)
        ( 2  4 12)
        ( 3  5 14)
        ( 1  4  6)
        ( 5  7 15)
        ( 6  8 17)
        ( 1  7  9)
        ( 8 10 18)
        ( 2  9 11)
        (10 12 19)
        ( 3 11 13)
        (12 14 20)
        ( 4 13 15)
        ( 6  4 16) ;(but 4 doesnt have a tunnel back here?)
        (15 17 20)
        ( 7 16 18)
        ( 9 17 19)
        (11 18 20)
        (13 16 19)
      )))
      (get-random-room-r! (fun (self unacceptable)
        (call! random range (list 1 20) room
          (if (elem? room unacceptable)
            (self self unacceptable)
            room))))
      (get-random-room! (fun (unacceptable)
        (get-random-room-r! get-random-room-r! unacceptable)))
      (get-n-random-rooms-r! (fun (self n acc)
        (if (equal? n 0)
          acc
          (self self (subtract n 1)
                     (pair (get-random-room! acc) acc)))))
      (get-n-random-rooms! (fun (n acc)
        (get-n-random-rooms-r! get-n-random-rooms-r! n acc)))
      (initial-wumpus (get-random-room! ()))
      (initial-bats (get-n-random-rooms! 2 ()))
      (initial-pits (get-n-random-rooms! 2 ()))
      (initial-room (get-random-room! (pair initial-wumpus (append initial-bats initial-pits))))
      (initial-arrows 5)
      (print! (macro (self args env)
        ;''If the thing to be printed turns out to be the empty list,
           nothing is printed''
        (let (
            (subst-env
              (map
                (fun (binding)
                  (pair (list (literal ?) (head binding)) (tail binding)))
                env))
            (subject (subst-many subst-env (head args)))
          )
          (if (not (equal? subject ()))
            (call! crude-output write subject result
              (eval env (head (tail args))))
            (eval env (head (tail args)))))))
      (main! (fun (self room wumpus bats pits arrows)
        (let
          (
            (tunnels (index room caverns))
            (unrecognized-command! (fun ()
              (print! (unrecognized command --
                      try (m room) or (s room1 room2 etc))
                (self self room wumpus bats pits arrows))))
            (report-room (fun (room)
              (filter (fun (x) (not (empty? x)))
                (list
                  (if (equal? room wumpus) (literal (you smell a wumpus)) ())
                  (if (elem? room bats) (literal (fluttering of bat wings nearby)) ())
                  (if (elem? room pits) (literal (you feel a draft)) ())))))
            (report-nearby (fun (self rooms acc)
              (if (empty? rooms)
                acc
                (self self (tail rooms) (append (report-room (head rooms)) acc)))))
            (fire (fun (self room itinerary)
              (if (equal? room wumpus)
                (literal hit)
                (if (empty? itinerary)
                  (literal miss)
                  (let
                    (
                      (tunnels (index room caverns))
                      (next-dest (head itinerary))
                    )
                    (if (elem? next-dest tunnels)
                      (self self next-dest (tail itinerary))
                      (literal wall)))))))
            (move-wumpus! (fun (arrows-now)
              (call! random range (list 1 4) die-roll
                (bind wumpus-now
                  (if (equal? die-roll 1)
                    wumpus
                    (print! (you hear the wumpus moving)
                      (call! random range (list 0 2) wumpus-tunnel
                        (index wumpus-tunnel (index wumpus caverns)))))
                  (if (equal? wumpus-now room)
                    (print! (oh dear the wumpus saw you and it ATE YOU UP OM NOM NOM NOM)
                      #f)
                    (self self room wumpus-now bats pits arrows-now))))))
          )
          (print! (you are in room (? room) with (? arrows) arrows --
                  tunnels lead to rooms (? tunnels))
            (choose
              ((equal? arrows 0)
                (print! (no arrows left! how does it feel to be a sitting duck?)
                  #f))
              ((elem? room bats)
                (print! (ZAP super bat snatch! elsewheresville for you!)
                  (self self (get-random-room ()) wumpus bats pits arrows)))
              ((elem? room pits)
                (print! (YIIIEEEEEE -- fell in a bottomless pit)
                  #f))
              ((equal? room wumpus)
                (print! (egad the wumpus is right here)
                  (move-wumpus! arrows)))
              (else
                (bind whats-nearby (report-nearby report-nearby tunnels ())
                 (print! (? whats-nearby)
                  (recv! entered
                    (choose
                      ((equal? entered (literal eof))
                        (print! (gave up eh? no wumpus for you)
                          #f))
                      ((list? entered)
                        (bind command (head entered)
                          (choose
                            ((equal? command (literal m))
                              (bind dest (head (tail entered))
                                (if (elem? dest tunnels)
                                  (self self dest wumpus bats pits arrows)
                                  (print! (no tunnel in that direction)
                                    (self self room wumpus bats pits arrows)))))
                            ((equal? command (literal s))
                              (bind itinerary (tail entered)
                                (if (> (length itinerary) 5)
                                  (print! (your arrows have a maximum range of 5 rooms)
                                    (self self room wumpus bats pits arrows))
                                  (print! (firing an arrow into rooms (? itinerary) here we go)
                                    (bind result (fire fire room itinerary)
                                      (choose
                                        ((equal? result (literal hit))
                                          (print! (great shot! you got the wumpus!)
                                            #t))
                                        ((equal? result (literal miss))
                                          (print! (your arrow did not hit anything)
                                            (move-wumpus! (subtract arrows 1))))
                                        ((equal? result (literal wall))
                                          (print! (a miscalculation -- your arrow hit a wall)
                                            (move-wumpus! (subtract arrows 1))))))))))
                            (else
                              (unrecognized-command!)))))
                      (else
                        (unrecognized-command!))))))))))))
    )
    (call! crude-input subscribe () x
      (main! main! initial-room initial-wumpus initial-bats
                 initial-pits initial-arrows))))
