;''FIXME -- uses old (Robin 0.2) Reactor syntax, not expected to work under 0.3''

;(require small list arith)

(reactor (line-terminal) (list 0 0) (macro (self args env)
  (let ((event (head args))
        (payload (head (tail args)))
        (state (head (tail (tail args))))
        (x (head state))
        (y (head (tail state)))
        (move (fun (msg dx dy state)
          (let ((newx (add x dx))
                (newy (add y dy))
                (newstate (list newx newy))
                (room (append
                  (literal ''You are in room #'')
                  (list (add newx 65) (add newy 65)))))
            (list newstate
                  (list (literal writeln) msg)
                  (list (literal writeln) room)))))
        (dont-understand (fun (state)
          (list state (list (literal writeln)
                            (literal ''Please enter n, s, e, or w, or q to quit.''))))))
    (choose
      ((equal? event (literal init))
        (list state (list (literal writeln)
                          (literal ''Welcome to Not Quite an Adventure!''))))
      ((equal? event (literal eof))
        (list state (list (literal writeln)
                          (literal ''Bye!''))))
      ((equal? event (literal readln))
        (if (empty? payload)
          (dont-understand state)
          (bind letter (list (head payload))
            (choose
              ((equal? letter (literal ''n''))
                (move (literal ''North!'') 0 1 state))
              ((equal? letter (literal ''s''))
                (move (literal ''South!'') 0 (subtract 0 1) state))
              ((equal? letter (literal ''e''))
                (move (literal ''East!'') 1 0 state))
              ((equal? letter (literal ''w''))
                (move (literal ''West!'') (subtract 0 1) 0 state))
              ((equal? letter (literal ''q''))
                (list state (list (literal close) 0)))
              (else
                (dont-understand state))))))
       (else
         (list state))))))
