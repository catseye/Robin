(assert fun)  ;''A way to signal that it requires stdlib.''

(reactor (line-terminal) (list 0 0) (macro (self args env)
  (let ((event (head args))
        (event-type (head event))
        (event-payload (head (tail event)))
        (state (head (tail args)))
        (x (head state))
        (y (head (tail state)))
        (move (fun (msg dx dy state)
          (let ((newx (add x dx))
                (newy (add y dy))
                (newstate (list newx newy))
                (room (append
                  (literal ''You are in room #'')
                  (list (add newx 65) (add newy 65)))))
            (list newstate
                  (list (literal writeln) msg)
                  (list (literal writeln) room)))))
        (dont-understand (fun (state)
          (list state (list (literal writeln)
                            (literal ''Please enter n, s, e, or w, or q to quit.''))))))
    (choose
      ((equal? event-type (literal init))
        (list state (list (literal writeln)
                          (literal ''Welcome to Not Quite an Adventure!''))))
      ((equal? event-type (literal eof))
        (list state (list (literal writeln)
                          (literal ''Bye!''))))
      ((equal? event-type (literal readln))
        (if (empty? event-payload)
          (dont-understand state)
          (bind letter (list (head event-payload))
            (choose
              ((equal? letter (literal ''n''))
                (move (literal ''North!'') 0 1 state))
              ((equal? letter (literal ''s''))
                (move (literal ''South!'') 0 (subtract 0 1) state))
              ((equal? letter (literal ''e''))
                (move (literal ''East!'') 1 0 state))
              ((equal? letter (literal ''w''))
                (move (literal ''West!'') (subtract 0 1) 0 state))
              ((equal? letter (literal ''q''))
                (list state (list (literal stop) 0)))
              (else
                (dont-understand state))))))
       (else
         (list state))))))
