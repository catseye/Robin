(robin (0 . 1) (small (0 . 1)
                exception (0 . 1)
                concurrency (0 . 1)
                crude-io (0 . 1)
                env (0 . 1))
  (let (
    (restricted-env
      (export pair head tail if equal? pair? macro? symbol? boolean?
              number? subtract divide floor sign eval macro raise
              literal fun bind let choose env))
    (input-loop
        (fun (self)
          (recv entered
            (if (equal? entered (literal eof))
              (literal bye)
              (bind result (catch error (pair (literal error) error)
                             (eval restricted-env entered))
                (call crude-output write result foo
                  (self self)))))))
    )
    (call crude-input subscribe () x
      (input-loop input-loop))))
